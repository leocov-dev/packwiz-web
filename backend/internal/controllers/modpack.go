package controllers

import (
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"net/http"
	"packwiz-web/internal/config"
	"packwiz-web/internal/services/packwiz_svc"
	"path/filepath"
	"strings"
)

type ModpackController struct {
	ps *packwiz_svc.PackwizService
}

func NewModpackController(db *gorm.DB) *ModpackController {
	return &ModpackController{
		ps: packwiz_svc.NewPackwizService(db),
	}
}

// ServeStatic
// serve the static files generated by the packwiz_cli cli. these are modified by
// the server process calling the cli. the root path should already exist on
// the server at start-time and is defined by PACKWIZ_DIR.
func (mc *ModpackController) ServeStatic(c *gin.Context) {
	slug := c.Param("slug")
	filePath := c.Param("filepath")

	if slug == "" || filePath == "" {
		c.AbortWithStatus(http.StatusNotFound)
		return
	}

	if !mc.ps.IsPackPublished(slug) {
		c.AbortWithStatus(http.StatusNotFound)
		return
	}

	modpackDir := filepath.Join(config.C.PackwizDir, slug)
	absPath := filepath.Clean(filepath.Join(modpackDir, filePath))

	// any served path must be relative to a known slug dir
	if !strings.HasPrefix(absPath, modpackDir) {
		c.AbortWithStatus(http.StatusNotFound)
		return
	}

	// any served path may never contain a directory starting with a `.`
	dirs := strings.Split(absPath, string(filepath.Separator))
	for _, dir := range dirs {
		if strings.HasPrefix(dir, ".") {
			c.AbortWithStatus(http.StatusNotFound)
			return
		}
	}

	c.File(absPath)
}
